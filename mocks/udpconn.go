// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qdm12/pingodown/internal/connection (interfaces: UDPConn)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	net "net"
	reflect "reflect"
)

// MockUDPConn is a mock of UDPConn interface
type MockUDPConn struct {
	ctrl     *gomock.Controller
	recorder *MockUDPConnMockRecorder
}

// MockUDPConnMockRecorder is the mock recorder for MockUDPConn
type MockUDPConnMockRecorder struct {
	mock *MockUDPConn
}

// NewMockUDPConn creates a new mock instance
func NewMockUDPConn(ctrl *gomock.Controller) *MockUDPConn {
	mock := &MockUDPConn{ctrl: ctrl}
	mock.recorder = &MockUDPConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUDPConn) EXPECT() *MockUDPConnMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockUDPConn) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockUDPConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockUDPConn)(nil).Close))
}

// Read mocks base method
func (m *MockUDPConn) Read(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockUDPConnMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockUDPConn)(nil).Read), arg0)
}

// Write mocks base method
func (m *MockUDPConn) Write(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockUDPConnMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockUDPConn)(nil).Write), arg0)
}

// WriteToUDP mocks base method
func (m *MockUDPConn) WriteToUDP(arg0 []byte, arg1 *net.UDPAddr) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteToUDP", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteToUDP indicates an expected call of WriteToUDP
func (mr *MockUDPConnMockRecorder) WriteToUDP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteToUDP", reflect.TypeOf((*MockUDPConn)(nil).WriteToUDP), arg0, arg1)
}
